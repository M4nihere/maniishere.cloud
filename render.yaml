# render.yaml

services:
  - name: db
    env: standard
    start_command: ["docker-entrypoint.sh", "postgres"]
    dockerfile: |
      FROM postgres:15-alpine
      ENV POSTGRES_DB=${DB_NAME:-gauzy}
      ENV POSTGRES_USER=${DB_USER:-postgres}
      ENV POSTGRES_PASSWORD=${DB_PASS:-gauzy_password}
      HEALTHCHECK --interval=30s --timeout=10s --retries=3 CMD psql postgres://$${POSTGRES_USER}:$${POSTGRES_PASSWORD}@localhost:5432/$${POSTGRES_DB} || exit 1
    persistent_disks:
      - name: postgres_data
        mount_path: /var/lib/postgresql/data
    init_commands:
      - cmd: /docker-entrypoint-initdb.d/init-user-db.sh
        run_on: first_start
    ports:
      - port: 5432
        protocol: TCP

  - name: cube
    env: standard
    start_command: ["node", "server.js"]
    dockerfile: |
      FROM cubejs/cube:latest
      ENV CUBEJS_DEV_MODE=true
      ENV CUBEJS_DB_TYPE=postgres
      ENV CUBEJS_DB_HOST=db
      ENV CUBEJS_DB_PORT=5432
      ENV CUBEJS_DB_NAME=${DB_NAME:-gauzy}
      ENV CUBEJS_DB_USER=${DB_USER:-postgres}
      ENV CUBEJS_DB_PASS=${DB_PASS:-gauzy_password}
      ENV CUBEJS_PG_SQL_PORT=5430
      ENV CUBEJS_SQL_USER=${CUBE_USER:-cube_user}
      ENV CUBEJS_SQL_PASSWORD=${CUBE_PASS:-cube_pass}
    volumes:
      - name: cube_data
        mount_path: /cube/conf
    links:
      - db
    ports:
      - port: 4000
        protocol: TCP
      - port: 5430
        protocol: TCP

  - name: jitsu
    env: standard
    start_command: ["jitsu", "start"]
    dockerfile: |
      FROM jitsucom/jitsu:latest
      ENV REDIS_URL=redis://redis:6379
      ENV USER_RECOGNITION_ENABLED=true
      ENV USER_RECOGNITION_REDIS_URL=redis://jitsu_redis_users_recognition:6380
      ENV TERM=xterm-256color
    depends_on:
      - redis
      - jitsu_redis_users_recognition
    volumes:
      - ./.deploy/jitsu/configurator/data/logs:/home/configurator/data/logs
      - ./.deploy/jitsu/server/data/logs:/home/eventnative/data/logs
      - ./.deploy/jitsu/server/data/logs/events:/home/eventnative/data/logs/events
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - port: 8000
        protocol: TCP

  - name: elasticsearch
    env: standard
    start_command: ["elasticsearch"]
    dockerfile: |
      FROM elasticsearch:7.17.7
      ENV ES_JAVA_OPTS="-Xms512m -Xmx1024m"
      ENV discovery.type=single-node
      ENV http.port=9200
      ENV http.cors.enabled=true
      ENV http.cors.allow-origin=http://localhost:3000,http://127.0.0.1:3000,http://localhost:1358,http://127.0.0.1:1358
      ENV http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      ENV http.cors.allow-credentials=true
      ENV bootstrap.memory_lock=true
      ENV xpack.security.enabled=false
    ports:
      - port: 9200
        protocol: TCP
      - port: 9300
        protocol: TCP
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9200/_cat/health']
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s

  - name: dejavu
    env: standard
    start_command: ["dejavu"]
    dockerfile: |
      FROM appbaseio/dejavu:3.6.0
    links:
      - elasticsearch
    ports:
      - port: 1358
        protocol: TCP

  - name: redis
    env: standard
    start_command: ["redis-server"]
    dockerfile: |
      FROM redis:7.0.2-alpine
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli -h localhost -p 6379 PING']
      interval: 1s
      timeout: 30s
    ports:
      - port: 6379
        protocol: TCP

  - name: jitsu_redis_users_recognition
    env: standard
    start_command: ["redis-server"]
    dockerfile: |
      FROM redis:7.0.2-alpine
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli -h localhost -p 6380 PING']
      interval: 1s
      timeout: 30s
    ports:
      - port: 6380
        protocol: TCP

  - name: minio
    env: standard
    start_command: ["minio", "server", "/data", "--address", ":9000", "--console-address", ":9001"]
    dockerfile: |
      FROM quay.io/minio/minio:latest
      ENV MINIO_ROOT_USER=ever-gauzy-access-key
      ENV MINIO_ROOT_PASSWORD=ever-gauzy-secret-key
    restart: unless-stopped
    ports:
      - port: 9000
        protocol: TCP
      - port: 9001
        protocol: TCP

  - name: minio_create_buckets
    env: standard
    start_command: ["/bin/sh", "-c", "until (/usr/bin/mc alias set minio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD) do echo 'Waiting to start minio...' && sleep 1; done; /usr/bin/mc mb minio/ever-gauzy --region=eu-north-1; exit 0;"]
    dockerfile: |
      FROM minio/mc
      ENV MINIO_ROOT_USER=ever-gauzy-access-key
      ENV MINIO_ROOT_PASSWORD=ever-gauzy-secret-key
    depends_on:
      - minio

  - name: pgweb
    env: standard
    start_command: ["pgweb"]
    dockerfile: |
      FROM sosedoff/pgweb
    depends_on:
      - db
    links:
      - db:${DB_HOST:-db}
    ports:
      - port: 8081
        protocol: TCP

  - name: api
    env: standard
    start_command: ["node", "main.js"]
    dockerfile: |
      FROM gauzy-api:latest
      ENV NODE_ENV=${NODE_ENV:-development}
      ENV API_BASE_URL=${API_BASE_URL:-http://localhost:3000}
      ENV CLIENT_BASE_URL=${CLIENT_BASE_URL:-http://localhost:4200}
    env_file:
      - .env.compose
    entrypoint: ['./entrypoint.compose.sh']
    restart: on-failure
    depends_on:
      - db
      - redis
      - minio
      - minio_create_buckets
      - elasticsearch
      - cube
    links:
      - db:${DB_HOST:-db}
      - cube:${CUBE_HOST:-cube}
      - redis:${REDIS_HOST:-redis}
      - minio:${MINIO_HOST:-minio}
      - elasticsearch:${ES_HOST:-elasticsearch}
    ports:
      - port: 3000
        protocol: TCP

  - name: webapp
    env: standard
    start_command: ["nginx", "-g", "daemon off;"]
    dockerfile: |
      FROM gauzy-webapp:latest
      ENV NODE_ENV=${NODE_ENV:-development}
      ENV API_BASE_URL=${API_BASE_URL:-http://localhost:3000}
      ENV CLIENT_BASE_URL=${CLIENT_BASE_URL:-http://localhost:4200}
      ENV SENTRY_DSN=${SENTRY_DSN:-}
      ENV SENTRY_TRACES_SAMPLE_RATE=${SENTRY_TRACES_SAMPLE_RATE:-0.1}
      ENV CHATWOOT_SDK_TOKEN=${CHATWOOT_SDK_TOKEN:-}
      ENV CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME:-}
      ENV CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY:-}
      ENV GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY:-}
      ENV GOOGLE_PLACE_AUTOCOMPLETE=${GOOGLE_PLACE_AUTOCOMPLETE:-false}
      ENV DEFAULT_LATITUDE=${DEFAULT_LATITUDE:-42.6459136}
      ENV DEFAULT_LONGITUDE=${DEFAULT_LONGITUDE:-23.3332736}
      ENV DEFAULT_CURRENCY=${DEFAULT_CURRENCY:-USD}
      ENV GAUZY_GITHUB_CLIENT_ID=${GAUZY_GITHUB_CLIENT_ID:-}
      ENV GAUZY_GITHUB_APP_NAME=${GAUZY_GITHUB_APP_NAME:-}
      ENV GAUZY_GITHUB_REDIRECT_URL=${GAUZY_GITHUB_REDIRECT_URL:-}
      ENV GAUZY_GITHUB_POST_INSTALL_URL=${GAUZY_GITHUB_POST_INSTALL_URL:-}
      ENV GAUZY_GITHUB_APP_ID=${GAUZY_GITHUB_APP_ID:-}
      ENV JITSU_BROWSER_URL=${JITSU_BROWSER_URL:-}
      ENV JITSU_BROWSER_WRITE_KEY=${JITSU_BROWSER_WRITE_KEY:-}
      ENV DEMO=true
      ENV API_HOST=${API_HOST:-api}
      ENV API_PORT=${API_PORT:-3000}
    env_file:
      - .env.compose
    restart: on-failure
    links:
      - db:${DB_HOST:-db}
      - api:${API_HOST:-api}
      - cube:${CUBE_HOST:-cube}
      - redis:${REDIS_HOST:-redis}
      - minio:${MINIO_HOST:-minio}
      - elasticsearch:${ES_HOST:-elasticsearch}
    depends_on:
      - db
      - redis
      - minio
      - minio_create_buckets
      - elasticsearch
      - api
    ports:
      - port: 4200
        protocol: TCP

volumes:
  - name: redis_data
  - name: postgres_data
  - name: elasticsearch_data
  - name: minio_data
  - name: cube_data
  - name: certificates
  - name: jitsu_workspace

networks:
  - name: overlay
    driver: bridge
